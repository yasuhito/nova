==- Dach 参加レポート -----------------------------------------------==

まだ書きかけです。やっぱり英語にする必要あるのかな。


==- チーム情報 ------------------------------------------------------==

チームは私 1 人でした。2 人で登録しましたが、もう一人は仕事が忙しくなか
なか時間が割けなかったため、一人で参加になりました。


==- 最終結果 --------------------------------------------------------==

参加したのは BT 部門で、--check_ans の出力は次の通りです。

FAIL TRIAL-final_dach-380643 5005.2684381 hongo000 Tue Aug 12 14:58:36 2008 f5a0e65e647061fda32e8f0247204c98


==- コンポーネントと最適化 ------------------------------------------==

いろいろあってちゃんと覚えていないけど、ファイルを見ながら思い出します。

すべて Ruby で書かれていて、やってることは基本的には高級なシェルスクリ
プトみたいなかんじ、要はバッチ処理です。

小さいデーモンがいくつか立っていて、ジョブの実行状況を見ながらそこに
ssh で命令を次々と投げていくかんじです。本当はちゃんとスケジューリング
とかしたかったんだけど、そこまで到達できませんでした。


==- 評価 -----------------------------------------------------------==

ぜんぶのジョブを完了できなかったので、スロットの終わりに 1.5 時間ぐらい
で強制的に--check_ans させるようにしました。

だいたい --check_ans がこのくらいで終わるだろうなっていうことを事前に
チェックしてあって、本当にスロットのギリギリまで粘るようにしました。


==- 考察 -----------------------------------------------------------==

次のような工夫をしました。

■ 自動化する

さまざまな作業を自動化することで、開発やテストを飛躍的に効率化できます。
ノードがたくさんあるので、手作業では時間がかかってミスも起こります。
ちょっと手間をかけて自動化するだけで、開発 -> テスト -> 開発のサイクル
を縮めることができます。

自動化できる項目としては次のようなものがありました。

* プログラムのデプロイ
* 実行環境のセットアップ (プロセスやファイルの掃除、デーモンの起動 etc)
* 実行結果のグラフ化

これらはすべてコマンド一発でできるようにしておく必要があります。つまり、
一つのノードでコマンドを打つとすべてのクラスタで実行される、というよう
にしておきます。

自動化には gxp がとても役に立ちました。
	   

■ 可視化する

クラスタで何が起こっているかを確実に分析できるように、必要な情報を可視
化できるようにしました。

具体的には、ジョブの実行状況をリアルタイムに確認できるようなツールを
Tk とテキストベースで書きました。ジョブがどのノードにディスパッチされて、
どれくらいノードが使われているかということがリアルタイムに確認できます。
これによって、マルチスレッドのバグを発見することができました。

また、ジョブの実行時間をグラフで可視化できるようにしました。スケジュー
リングアルゴリズムには反映できませんでしたが、ジョブによって実行時間に
大きく偏りがあることが一目で確認できました。

既存の可視化ツール (ganglia など) はおおざっぱな解析には便利ですが、効
果的な開発やデバッグにはやはり自分でツールを書く必要があると思います。
汎用ツールでは必要な情報が取れなかったり、リアルタイム性に欠けていたり
するからです。

必要に応じて可視化ツールをささっと書けるように、日頃からの調査が必要だ
と思いました。今回 GUI を作るために Ruby/Tk を使いましたが、API がひど
くて理解するのに丸 1 日使ってしまいました。もう絶対に使いません。こうい
うことを避けるために日頃からどんなツールキットがあって、どうやって使う
かを把握しておく必要があると思います。


■ 耐故障性のための工夫

プログラムの耐故障性をテストするために、一定の確率で fail するようなダ
ミーのジョブを作って使いました。スクリプトの内容はおおざっぱには次のよ
うな感じで、ランダムにスリープするだけのプロセスで、だいたい 10 % の確
率で FAIL します。

if rand( 10 ) == 0
  exit 1 # FAIL!
else
  sleep rand( 30 )
  exit 0
end

これだと任意のタイミングで失敗させられるので、ジョブが失敗したときの例
外の補足し忘れなどをつぶすのに役立ちました。この手のダミージョブのバリ
エーションとしては、ホスト名の下一ケタが '0' だったら fail するとか、い
ろいろなバージョンを作ってデバッグに役立てました。


■ ミドルウェアを自作する

知らない/使ったことのないシステムは使わない


==- 次のステップへ向けて --------------------------------------------==

やりたかったけど、できなかったことがいくつかあります。

クラスタ間のジョブスケジューリングをまったくしていなかったので、暇なク
ラスタと忙しいクラスタに分かれました。しかも、可視化していたのではっき
りと深刻さを認識できました :)

スケジューリングの方針としては、ジョブの重さを画像の星の数から推定して、
ナップサック問題みたいに詰めていくだけでだいぶ違ったと思います。


==- まとめ ----------------------------------------------------------==

まずは大会を運営した委員会およびスタッフと、InTrigger, PrestoIII を提供
し管理いただいたスタッフに感謝します。問題の難易度は高かったですが、チャ
レンジングな問題を作成しつつ、安定した実行環境を提供することはさらに困
難だったと思います。

個人的な感想としては、とりかかるのが遅すぎた & スキルも足りませんでした。
小さい子供が居るのでなかなか時間も割けないのですが :)、もうちょっと余裕
を持って普段からプログラミングの練習をしておくく必要があることを痛感し
ました。
