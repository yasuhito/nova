Dach レポート 2008/8/15 Yasuhito TAKAMIYA


==----- チーム情報 ------------------------------------------------------------==

チーム名: Team hitoritabi (名前変更しました)
メンバー: Yasuhito TAKAMIYA (NEC), Yasuo Itabashi (NEC)


==----- 最終結果 --------------------------------------------------------------==

参加したのは BT 部門です。--check_ans の出力は次の通りです。
SUCCESS TRIAL-final_dach-360450 4783.33158493 hongo000 Thu Aug 14 12:27:35 2008 43e4959f32081937df6ad0d2d84e8dbd

superfind の最終出力は次のファイルです。
hongo000:/home/dach000/nova/all.result


==----- コンポーネントと動作の説明 --------------------------------------------==

プログラムはすべて Ruby で書かれています。ソースコードは次の URL にて公
開されています。

http://github.com/yasuhito/nova/tree/master

全体の実行の流れは単純であり、ジョブの実行状況を見ながらジョブを次々と
投げていきます (図を参照)。以降ではソースコードを交じえつつ簡単に動作の
概要を説明します。

全体のジョブ制御 (start.rb) は hongo000 で動作します。start.rb はそれぞ
れのクラスタに割り振られたすべてのジョブ終了するまで、ジョブ実行を継続
させます (Start#run メソッド)。

def run
  do_parallel( @clusters ) do | each |
    until Cluster[ each ].finished?
      Cluster[ each ].continue
    end
    Cluster[ each ].shutdown
  end
end

ジョブの実行結果は hongo000 のローカルディスクにすべて保存され、全体が
終了後に cat でつなげられて --check_ans されます。

各クラスタの先頭ノードには novad というデーモンが立ち上がっており、クラ
スタ内でのジョブのディスパッチを行います。ジョブのディスパッチと終了コー
ドの取得、およびジョブ出力のリダイレクトには ssh を用いることで実装を簡
略化しました。

今回のアルゴリズムでは、各クラスタは最初に割り振られたジョブを実行しま
す。つまり、クラスタ間でのジョブのスケジューリングは行いません。これに
ついては次以降の節で説明します。


==----- 最適化 ----------------------------------------------------------------==

ログを注意深く観察してみると、初期状態ではいくつかのジョブ (.fits) が複
数のクラスタに渡って配置されていることがわかりました。これでは同じジョ
ブを複数のクラスタで実行してしまうことになり無駄なので、すでに実行中の
ジョブについては 2 度以上実行しないようにしました (Cluster#continue メ
ソッド)。

if Jobs.assigned?( job )
  Log.warn "Job #{ job } already assigned. skipping..."
  @job_done << job
  DachCUI.show_status
end

そのほか、ジョブのディスパッチ処理など並列化可能な部分についてはスレッ
ドによる並列化を行いました。スレッド処理を簡単に記述するため、与えられ
たコードブロックをスレッドで並列実行する Start#do_parallel メソッドや、
スレッドプールを実現する ThreadPool クラス (thread_pool.rb) などを作り
ました。

ThreadPool のスレッド数の上限については、あまり大きくしすぎるとファイル
ディスクリプタを使い果たしてしまうため、エラーを起こさない程度にぎりぎ
りの大きさまで調節してあります。

なお、superfind の最適化などは行っていません。


==-- 評価 ------------------------------------------------------------==

ジョブの実行結果クラスタごとに
hongo000:~dach000/nova/results/{chiba,hiro,hongo,...} というディレクト
リごとに保存されます。


==-- 考察 -----------------------------------------------------------==

次のような工夫をしました。

■ 自動化する

さまざまな作業を自動化することで、開発やテストを飛躍的に効率化できます。
ノードがたくさんあるので、手作業では時間がかかってミスも起こります。
ちょっと手間をかけて自動化するだけで、開発 -> テスト -> 開発のサイクル
を縮めることができます。

自動化できる項目としては次のようなものがありました。

* プログラムのデプロイ
* 実行環境のセットアップ (プロセスやファイルの掃除、デーモンの起動 etc)
* 実行結果のグラフ化

これらはすべてコマンド一発でできるようにしておく必要があります。つまり、
一つのノードでコマンドを打つとすべてのクラスタで実行される、というよう
にしておきます。

自動化には gxp がとても役に立ちました。
	   

■ 可視化する

クラスタで何が起こっているかを確実に分析できるように、必要な情報を可視
化できるようにしました。

具体的には、ジョブの実行状況をリアルタイムに確認できるようなツールを
Tk とテキストベースで書きました。ジョブがどのノードにディスパッチされて、
どれくらいノードが使われているかということがリアルタイムに確認できます。
これによって、マルチスレッドのバグを発見することができました。

また、ジョブの実行時間をグラフで可視化できるようにしました。スケジュー
リングアルゴリズムには反映できませんでしたが、ジョブによって実行時間に
大きく偏りがあることが一目で確認できました。

既存の可視化ツール (ganglia など) はおおざっぱな解析には便利ですが、効
果的な開発やデバッグにはやはり自分でツールを書く必要があると思います。
汎用ツールでは必要な情報が取れなかったり、リアルタイム性に欠けていたり
するからです。

必要に応じて可視化ツールをささっと書けるように、日頃からの調査が必要だ
と思いました。今回 GUI を作るために Ruby/Tk を使いましたが、API がひど
くて理解するのに丸 1 日使ってしまいました。もう絶対に使いません。こうい
うことを避けるために日頃からどんなツールキットがあって、どうやって使う
かを把握しておく必要があると思います。


■ 耐故障性のための工夫

プログラムの耐故障性をテストするために、一定の確率で fail するようなダ
ミーのジョブを作って使いました。スクリプトの内容はおおざっぱには次のよ
うな感じで、ランダムにスリープするだけのプロセスで、だいたい 10 % の確
率で FAIL します。

if rand( 10 ) == 0
  exit 1 # FAIL!
else
  sleep rand( 30 )
  exit 0
end

これだと任意のタイミングで失敗させられるので、ジョブが失敗したときの例
外の補足し忘れなどをつぶすのに役立ちました。この手のダミージョブのバリ
エーションとしては、ホスト名の下一ケタが '0' だったら fail するとか、い
ろいろなバージョンを作ってデバッグに役立てました。


■ ミドルウェアを自作する

知らない/使ったことのないシステムは使わない


==- 次のステップへ向けて --------------------------------------------==

やりたかったけど、できなかったことがいくつかあります。

クラスタ間のジョブスケジューリングをまったくしていなかったので、暇なク
ラスタと忙しいクラスタに分かれました。しかも、可視化していたのではっき
りと深刻さを認識できました :)

スケジューリングの方針としては、ジョブの重さを画像の星の数から推定して、
ナップサック問題みたいに詰めていくだけでだいぶ違ったと思います。


==- まとめ ----------------------------------------------------------==

まずは大会を運営した委員会およびスタッフと、InTrigger, PrestoIII を提供
し管理いただいたスタッフに感謝します。問題の難易度は高かったですが、チャ
レンジングな問題を作成しつつ、安定した実行環境を提供することはさらに困
難だったと思います。

個人的な感想としては、とりかかるのが遅すぎた & スキルも足りませんでした。
小さい子供が居るのでなかなか時間も割けないのですが :)、もうちょっと余裕
を持って普段からプログラミングの練習をしておくく必要があることを痛感し
ました。
